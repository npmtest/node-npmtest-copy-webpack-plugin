{"/home/travis/build/npmtest/node-npmtest-copy-webpack-plugin/test.js":"/* istanbul instrument in package npmtest_copy_webpack_plugin */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-copy-webpack-plugin/lib.npmtest_copy_webpack_plugin.js":"/* istanbul instrument in package npmtest_copy_webpack_plugin */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_copy_webpack_plugin = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_copy_webpack_plugin = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-copy-webpack-plugin/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-copy-webpack-plugin && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_copy_webpack_plugin */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_copy_webpack_plugin\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught.stack);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_copy_webpack_plugin.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_copy_webpack_plugin.rollup.js'] =\n            local.assetsDict['/assets.npmtest_copy_webpack_plugin.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_copy_webpack_plugin.__dirname +\n                    '/lib.npmtest_copy_webpack_plugin.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-copy-webpack-plugin/copy-webpack-plugin/dist/index.js":"'use strict';\n\nvar _bluebird = require('bluebird');\n\nvar _bluebird2 = _interopRequireDefault(_bluebird);\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _preProcessPattern = require('./preProcessPattern');\n\nvar _preProcessPattern2 = _interopRequireDefault(_preProcessPattern);\n\nvar _processPattern = require('./processPattern');\n\nvar _processPattern2 = _interopRequireDefault(_processPattern);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction CopyWebpackPlugin() {\n    var patterns = arguments.length <= 0 || arguments[0] === undefined ? [] : arguments[0];\n    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n    if (!Array.isArray(patterns)) {\n        throw new Error('[copy-webpack-plugin] patterns must be an array');\n    }\n\n    // Defaults debug level to 'warning'\n    options.debug = options.debug || 'warning';\n\n    // Defaults debugging to info if only true is specified\n    if (options.debug === true) {\n        options.debug = 'info';\n    }\n\n    var debugLevels = ['warning', 'info', 'debug'];\n    var debugLevelIndex = debugLevels.indexOf(options.debug);\n    function log(msg, level) {\n        if (level === 0) {\n            msg = 'WARNING - ' + msg;\n        } else {\n            level = level || 1;\n        }\n        if (level <= debugLevelIndex) {\n            console.log('[copy-webpack-plugin] ' + msg); // eslint-disable-line no-console\n        }\n    }\n\n    function warning(msg) {\n        log(msg, 0);\n    }\n\n    function info(msg) {\n        log(msg, 1);\n    }\n\n    function debug(msg) {\n        log(msg, 2);\n    }\n\n    var apply = function apply(compiler) {\n        var fileDependencies = [];\n        var contextDependencies = [];\n        var written = {};\n\n        compiler.plugin('emit', function (compilation, cb) {\n            debug('starting emit');\n            var callback = function callback() {\n                debug('finishing emit');\n                cb();\n            };\n\n            var globalRef = {\n                info: info,\n                debug: debug,\n                warning: warning,\n                compilation: compilation,\n                written: written,\n                fileDependencies: fileDependencies,\n                contextDependencies: contextDependencies,\n                context: compiler.options.context,\n                output: compiler.options.output.path,\n                ignore: options.ignore || [],\n                copyUnmodified: options.copyUnmodified,\n                concurrency: options.concurrency\n            };\n\n            if (globalRef.output === '/' && compiler.options.devServer && compiler.options.devServer.outputPath) {\n                globalRef.output = compiler.options.devServer.outputPath;\n            }\n\n            _bluebird2.default.each(patterns, function (pattern) {\n                // Identify absolute source of each pattern and destination type\n                return (0, _preProcessPattern2.default)(globalRef, pattern).then(function (pattern) {\n                    // Every source (from) is assumed to exist here\n                    return (0, _processPattern2.default)(globalRef, pattern);\n                });\n            }).catch(function (err) {\n                compilation.errors.push(err);\n            }).finally(callback);\n        });\n\n        compiler.plugin('after-emit', function (compilation, cb) {\n            debug('starting after-emit');\n            var callback = function callback() {\n                debug('finishing after-emit');\n                cb();\n            };\n\n            // Add file dependencies if they're not already tracked\n            _lodash2.default.forEach(fileDependencies, function (file) {\n                if (_lodash2.default.includes(compilation.fileDependencies, file)) {\n                    debug('not adding ' + file + ' to change tracking, because it\\'s already tracked');\n                } else {\n                    debug('adding ' + file + ' to change tracking');\n                    compilation.fileDependencies.push(file);\n                }\n            });\n\n            // Add context dependencies if they're not already tracked\n            _lodash2.default.forEach(contextDependencies, function (context) {\n                if (_lodash2.default.includes(compilation.contextDependencies, context)) {\n                    debug('not adding ' + context + ' to change tracking, because it\\'s already tracked');\n                } else {\n                    debug('adding ' + context + ' to change tracking');\n                    compilation.contextDependencies.push(context);\n                }\n            });\n\n            callback();\n        });\n    };\n\n    return {\n        apply: apply\n    };\n}\n\nCopyWebpackPlugin['default'] = CopyWebpackPlugin;\nmodule.exports = CopyWebpackPlugin;","/home/travis/build/npmtest/node-npmtest-copy-webpack-plugin/copy-webpack-plugin/dist/preProcessPattern.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = preProcessPattern;\n\nvar _bluebird = require('bluebird');\n\nvar _bluebird2 = _interopRequireDefault(_bluebird);\n\nvar _path = require('path');\n\nvar _path2 = _interopRequireDefault(_path);\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _isGlob = require('is-glob');\n\nvar _isGlob2 = _interopRequireDefault(_isGlob);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar fs = _bluebird2.default.promisifyAll(require('fs')); // eslint-disable-line import/no-commonjs\n\n// https://www.debuggex.com/r/VH2yS2mvJOitiyr3\nvar isTemplateLike = /(\\[ext\\])|(\\[name\\])|(\\[path\\])|(\\[folder\\])|(\\[emoji(:\\d+)?\\])|(\\[(\\w+:)?hash(:\\w+)?(:\\d+)?\\])|(\\[\\d+\\])/;\n\nfunction preProcessPattern(globalRef, pattern) {\n    var info = globalRef.info;\n    var debug = globalRef.debug;\n    var warning = globalRef.warning;\n    var context = globalRef.context;\n    var fileDependencies = globalRef.fileDependencies;\n    var contextDependencies = globalRef.contextDependencies;\n    var compilation = globalRef.compilation;\n\n\n    pattern = _lodash2.default.cloneDeep(pattern);\n    pattern.to = pattern.to || '';\n    pattern.context = pattern.context || context;\n    if (!_path2.default.isAbsolute(pattern.context)) {\n        pattern.context = _path2.default.join(context, pattern.context);\n    }\n    pattern.ignore = globalRef.ignore.concat(pattern.ignore || []);\n\n    info('processing from: \\'' + pattern.from + '\\' to: \\'' + pattern.to + '\\'');\n\n    switch (true) {\n        case !!pattern.toType:\n            // if toType already exists\n            break;\n        case isTemplateLike.test(pattern.to):\n            pattern.toType = 'template';\n            break;\n        case _path2.default.extname(pattern.to) === '' || pattern.to.slice(-1) === '/':\n            pattern.toType = 'dir';\n            break;\n        default:\n            pattern.toType = 'file';\n    }\n\n    debug('determined \\'' + pattern.to + '\\' is a \\'' + pattern.toType + '\\'');\n\n    // If we know it's a glob, then bail early\n    if (_lodash2.default.isObject(pattern.from) && pattern.from.glob) {\n        pattern.fromType = 'glob';\n        pattern.fromArgs = _lodash2.default.omit(pattern.from, ['glob']);\n        pattern.absoluteFrom = _path2.default.resolve(pattern.context, pattern.from.glob);\n        return _bluebird2.default.resolve(pattern);\n    }\n\n    if (_path2.default.isAbsolute(pattern.from)) {\n        pattern.absoluteFrom = pattern.from;\n    } else {\n        pattern.absoluteFrom = _path2.default.resolve(pattern.context, pattern.from);\n    }\n\n    debug('determined \\'' + pattern.from + '\\' to be read from \\'' + pattern.absoluteFrom + '\\'');\n\n    return fs.statAsync(pattern.absoluteFrom).catch(function () {\n        // If from doesn't appear to be a glob, then log a warning\n        if ((0, _isGlob2.default)(pattern.from) || pattern.from.indexOf('*') !== -1) {\n            pattern.fromType = 'glob';\n        } else {\n            var msg = 'unable to locate \\'' + pattern.from + '\\' at \\'' + pattern.absoluteFrom + '\\'';\n            warning(msg);\n            compilation.errors.push('[copy-webpack-plugin] ' + msg);\n            pattern.fromType = 'nonexistent';\n        }\n    }).then(function (stat) {\n        if (!stat) {\n            return pattern;\n        }\n\n        if (stat.isDirectory()) {\n            pattern.fromType = 'dir';\n            pattern.context = pattern.absoluteFrom;\n            contextDependencies.push(pattern.absoluteFrom);\n            pattern.absoluteFrom = _path2.default.join(pattern.absoluteFrom, '**/*');\n            pattern.fromArgs = {\n                dot: true\n            };\n        } else if (stat.isFile()) {\n            pattern.fromType = 'file';\n            pattern.context = _path2.default.dirname(pattern.absoluteFrom);\n            pattern.fromArgs = {\n                dot: true\n            };\n            fileDependencies.push(pattern.absoluteFrom);\n        } else if (!pattern.fromType) {\n            info('Unrecognized file type for ' + pattern.from);\n        }\n        return pattern;\n    });\n}","/home/travis/build/npmtest/node-npmtest-copy-webpack-plugin/copy-webpack-plugin/dist/processPattern.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = processPattern;\n\nvar _bluebird = require('bluebird');\n\nvar _bluebird2 = _interopRequireDefault(_bluebird);\n\nvar _path = require('path');\n\nvar _path2 = _interopRequireDefault(_path);\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _minimatch = require('minimatch');\n\nvar _minimatch2 = _interopRequireDefault(_minimatch);\n\nvar _writeFile = require('./writeFile');\n\nvar _writeFile2 = _interopRequireDefault(_writeFile);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar globAsync = _bluebird2.default.promisify(require('glob')); // eslint-disable-line import/no-commonjs\n\nfunction processPattern(globalRef, pattern) {\n    var info = globalRef.info;\n    var debug = globalRef.debug;\n    var output = globalRef.output;\n    var concurrency = globalRef.concurrency;\n\n    var globArgs = _lodash2.default.assign({\n        cwd: pattern.context\n    }, pattern.fromArgs || {});\n\n    if (pattern.fromType === 'nonexistent') {\n        return _bluebird2.default.resolve();\n    }\n\n    info('begin globbing \\'' + pattern.absoluteFrom + '\\' with a context of \\'' + pattern.context + '\\'');\n    return globAsync(pattern.absoluteFrom, globArgs).map(function (fileFrom) {\n        var file = {\n            force: pattern.force,\n            absoluteFrom: _path2.default.resolve(pattern.context, fileFrom)\n        };\n        file.relativeFrom = _path2.default.relative(pattern.context, file.absoluteFrom);\n\n        if (pattern.flatten) {\n            file.relativeFrom = _path2.default.basename(file.relativeFrom);\n        }\n\n        debug('found ' + fileFrom);\n\n        // Check the ignore list\n        var il = pattern.ignore.length;\n        while (il--) {\n            var ignoreGlob = pattern.ignore[il];\n\n            var globParams = {\n                dot: true,\n                matchBase: true\n            };\n\n            var glob = void 0;\n            if (_lodash2.default.isString(ignoreGlob)) {\n                glob = ignoreGlob;\n            } else if (_lodash2.default.isObject(ignoreGlob)) {\n                glob = ignoreGlob.glob || '';\n                // Overwrite minimatch defaults\n                globParams = _lodash2.default.assign(globParams, _lodash2.default.omit(ignoreGlob, ['glob']));\n            } else {\n                glob = '';\n            }\n\n            debug('testing ' + glob + ' against ' + file.relativeFrom);\n            if ((0, _minimatch2.default)(file.relativeFrom, glob, globParams)) {\n                info('ignoring \\'' + file.relativeFrom + '\\', because it matches the ignore glob \\'' + glob + '\\'');\n                return;\n            } else {\n                debug(glob + ' doesn\\'t match ' + file.relativeFrom);\n            }\n        }\n\n        // Change the to path to be relative for webpack\n        if (pattern.toType === 'dir') {\n            file.webpackTo = _path2.default.join(pattern.to, file.relativeFrom);\n        } else if (pattern.toType === 'file') {\n            file.webpackTo = pattern.to || file.relativeFrom;\n        } else if (pattern.toType === 'template') {\n            file.webpackTo = pattern.to;\n        }\n\n        if (_path2.default.isAbsolute(file.webpackTo)) {\n            if (output === '/') {\n                throw '[copy-webpack-plugin] Using older versions of webpack-dev-server, devServer.outputPath must be defined to write to absolute paths';\n            }\n\n            file.webpackTo = _path2.default.relative(output, file.webpackTo);\n        }\n\n        // ensure forward slashes\n        file.webpackTo = file.webpackTo.replace(/\\\\/g, '/');\n\n        info('determined that \\'' + fileFrom + '\\' should write to \\'' + file.webpackTo + '\\'');\n\n        return (0, _writeFile2.default)(globalRef, pattern, file);\n    }, { concurrency: concurrency || 100 }); // This is usually less than file read maximums while staying performant\n}","/home/travis/build/npmtest/node-npmtest-copy-webpack-plugin/copy-webpack-plugin/dist/writeFile.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = writeFile;\n\nvar _bluebird = require('bluebird');\n\nvar _bluebird2 = _interopRequireDefault(_bluebird);\n\nvar _loaderUtils = require('loader-utils');\n\nvar _loaderUtils2 = _interopRequireDefault(_loaderUtils);\n\nvar _path = require('path');\n\nvar _path2 = _interopRequireDefault(_path);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nvar fs = _bluebird2.default.promisifyAll(require('fs')); // eslint-disable-line import/no-commonjs\n\nfunction writeFile(globalRef, pattern, file) {\n    var info = globalRef.info;\n    var debug = globalRef.debug;\n    var compilation = globalRef.compilation;\n    var fileDependencies = globalRef.fileDependencies;\n    var written = globalRef.written;\n    var copyUnmodified = globalRef.copyUnmodified;\n\n\n    return fs.statAsync(file.absoluteFrom).then(function (stat) {\n        // We don't write empty directories\n        if (stat.isDirectory()) {\n            return;\n        }\n\n        // If this came from a glob, add it to the file watchlist\n        if (pattern.fromType === 'glob') {\n            fileDependencies.push(file.absoluteFrom);\n        }\n\n        info('reading ' + file.absoluteFrom + ' to write to assets');\n        return fs.readFileAsync(file.absoluteFrom).then(function (content) {\n            if (pattern.transform) {\n                content = pattern.transform(content, file.absoluteFrom);\n            }\n\n            var hash = _loaderUtils2.default.getHashDigest(content);\n\n            if (pattern.toType === 'template') {\n                info('interpolating template \\'' + file.webpackTo + '\\' for \\'' + file.relativeFrom + '\\'');\n\n                // A hack so .dotted files don't get parsed as extensions\n                var basename = _path2.default.basename(file.relativeFrom);\n                var dotRemoved = false;\n                if (basename[0] === '.') {\n                    dotRemoved = true;\n                    file.relativeFrom = _path2.default.join(_path2.default.dirname(file.relativeFrom), basename.slice(1));\n                }\n\n                // If it doesn't have an extension, remove it from the pattern\n                // ie. [name].[ext] or [name][ext] both become [name]\n                if (!_path2.default.extname(file.relativeFrom)) {\n                    file.webpackTo = file.webpackTo.replace(/\\.?\\[ext\\]/g, '');\n                }\n\n                // A hack because loaderUtils.interpolateName doesn't\n                // find the right path if no directory is defined\n                // ie. [path] applied to 'file.txt' would return 'file'\n                if (file.relativeFrom.indexOf(_path2.default.sep) < 0) {\n                    file.relativeFrom = _path2.default.sep + file.relativeFrom;\n                }\n\n                file.webpackTo = _loaderUtils2.default.interpolateName({ resourcePath: file.relativeFrom }, file.webpackTo, { content: content });\n\n                // Add back removed dots\n                if (dotRemoved) {\n                    var newBasename = _path2.default.basename(file.webpackTo);\n                    file.webpackTo = _path2.default.dirname(file.webpackTo) + '/.' + newBasename;\n                }\n            }\n\n            if (!copyUnmodified && written[file.absoluteFrom] && written[file.absoluteFrom][hash]) {\n                info('skipping \\'' + file.webpackTo + '\\', because it hasn\\'t changed');\n                return;\n            } else {\n                debug('added ' + hash + ' to written tracking for \\'' + file.absoluteFrom + '\\'');\n                written[file.absoluteFrom] = _defineProperty({}, hash, true);\n            }\n\n            if (compilation.assets[file.webpackTo] && !file.force) {\n                info('skipping \\'' + file.webpackTo + '\\', because it already exists');\n                return;\n            }\n\n            info('writing \\'' + file.webpackTo + '\\' to compilation assets from \\'' + file.absoluteFrom + '\\'');\n            compilation.assets[file.webpackTo] = {\n                size: function size() {\n                    return stat.size;\n                },\n                source: function source() {\n                    return content;\n                }\n            };\n        });\n    });\n}"}